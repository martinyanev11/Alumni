// <auto-generated />
using System;
using Alumni.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Alumni.Data.Migrations
{
    [DbContext(typeof(AlumniDbContext))]
    [Migration("20250709132901_responderNameIvane")]
    partial class responderNameIvane
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Alumni.Data.Models.CharityDonation", b =>
                {
                    b.Property<Guid>("CharityDonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentlyRaisedDonations")
                        .HasColumnType("decimal(12,3)");

                    b.Property<decimal>("DonationGoal")
                        .HasColumnType("decimal(12,3)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharityDonationId");

                    b.ToTable("CharityDonations");

                    b.HasData(
                        new
                        {
                            CharityDonationId = new Guid("59a312f0-e57a-4cd7-9c7e-66a29918792d"),
                            Content = "for this cause",
                            CreatedOn = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentlyRaisedDonations = 4396m,
                            DonationGoal = 6000m,
                            ImageUrl = "/images/event3.jpg",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Donate"
                        },
                        new
                        {
                            CharityDonationId = new Guid("f376c876-984f-4605-b488-d6bc6872c0bf"),
                            Content = "for this cause",
                            CreatedOn = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentlyRaisedDonations = 5078m,
                            DonationGoal = 5000m,
                            ImageUrl = "/images/event3.jpg",
                            IsDeleted = true,
                            LastEdited = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Donate"
                        },
                        new
                        {
                            CharityDonationId = new Guid("18065e6b-eb60-4bbc-a877-829e28fc60d6"),
                            Content = "for this cause",
                            CreatedOn = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentlyRaisedDonations = 34m,
                            DonationGoal = 6000m,
                            ImageUrl = "/images/event3.jpg",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Donate"
                        },
                        new
                        {
                            CharityDonationId = new Guid("f0e619aa-c6fc-49cb-9e48-67533f3904ff"),
                            Content = "for this cause",
                            CreatedOn = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentlyRaisedDonations = 4786m,
                            DonationGoal = 6069m,
                            ImageUrl = "/images/event3.jpg",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Donate"
                        },
                        new
                        {
                            CharityDonationId = new Guid("d5e58825-c20b-4e58-9c60-12bc6253681c"),
                            Content = "for this cause",
                            CreatedOn = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentlyRaisedDonations = 9485m,
                            DonationGoal = 10342m,
                            ImageUrl = "/images/event3.jpg",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Donate"
                        });
                });

            modelBuilder.Entity("Alumni.Data.Models.CharityDonationUser", b =>
                {
                    b.Property<Guid>("CharityDonationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CharityDonationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CharityDonationsUsers");
                });

            modelBuilder.Entity("Alumni.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEdited")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("NewsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentId");

                    b.HasIndex("NewsId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Alumni.Data.Models.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEdited")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("87c281f4-5052-47a5-a6f4-75c9741663ef"),
                            Contents = "The class of 2016 is going to have a meeting at the local park. There`s going to be food, but you can bring some.",
                            CreatedOn = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDateTime = new DateTime(2024, 5, 2, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/event1.jpg",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2024, 5, 2, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Meeting - 2016 class"
                        },
                        new
                        {
                            EventId = new Guid("541e7f5d-4016-474e-acd2-2f30ecd9a446"),
                            Contents = "The class of 2011 is going to have a meeting at the local beach.",
                            CreatedOn = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDateTime = new DateTime(2024, 7, 5, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/event2.jpg",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2024, 7, 5, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Meeting - 2011 class"
                        },
                        new
                        {
                            EventId = new Guid("9a1172e2-e2e5-44fd-92e6-285c1154e8dc"),
                            Contents = "The class of 2009 is going to have a meeting at the local pub.",
                            CreatedOn = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDateTime = new DateTime(2024, 5, 8, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/event3.jpg",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2024, 5, 8, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Meeting - 2009 class"
                        },
                        new
                        {
                            EventId = new Guid("832388e9-e1d9-4878-9299-273129c9f247"),
                            Contents = "The class of 2003 is going to have a meeting at the local pub.",
                            CreatedOn = new DateTime(2025, 7, 9, 16, 29, 0, 623, DateTimeKind.Local).AddTicks(2423),
                            EndDateTime = new DateTime(2024, 5, 8, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/event3.jpg",
                            IsDeleted = true,
                            LastEdited = new DateTime(2025, 7, 9, 16, 29, 0, 623, DateTimeKind.Local).AddTicks(2464),
                            StartDateTime = new DateTime(2024, 5, 8, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Meeting - 2003 class"
                        },
                        new
                        {
                            EventId = new Guid("74a8ad71-9425-4115-8b44-55cc94b13a89"),
                            Contents = "The class of 2009 is going to have a meeting at the local pub.",
                            CreatedOn = new DateTime(2025, 7, 9, 16, 29, 0, 623, DateTimeKind.Local).AddTicks(2468),
                            EndDateTime = new DateTime(2024, 5, 8, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/event1.jpg",
                            IsDeleted = false,
                            LastEdited = new DateTime(2025, 7, 9, 16, 29, 0, 623, DateTimeKind.Local).AddTicks(2469),
                            StartDateTime = new DateTime(2010, 5, 8, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Meeting - 2009 class"
                        },
                        new
                        {
                            EventId = new Guid("8f0a57e7-afe3-4648-8efa-9a977602bee0"),
                            Contents = "The class of 2009 is going to have a meeting at the local pub.",
                            CreatedOn = new DateTime(2025, 5, 8, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            EndDateTime = new DateTime(2024, 5, 8, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/event1.jpg",
                            IsDeleted = false,
                            LastEdited = new DateTime(2025, 7, 9, 16, 29, 0, 623, DateTimeKind.Local).AddTicks(2472),
                            StartDateTime = new DateTime(2024, 5, 8, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Meeting - 2009 class"
                        },
                        new
                        {
                            EventId = new Guid("257cb7ad-df19-4cac-a009-f68eeb305afa"),
                            Contents = "The class of 2009 is going to have a meeting at the local pub.",
                            CreatedOn = new DateTime(2023, 5, 8, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            EndDateTime = new DateTime(2024, 5, 8, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/event1.jpg",
                            IsDeleted = false,
                            LastEdited = new DateTime(2022, 5, 8, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2024, 5, 8, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Meeting - 2009 class"
                        });
                });

            modelBuilder.Entity("Alumni.Data.Models.HelpRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HelpRequests");
                });

            modelBuilder.Entity("Alumni.Data.Models.HelpResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpRequestId")
                        .HasColumnType("int");

                    b.Property<string>("ResponderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HelpRequestId");

                    b.ToTable("HelpResponses");
                });

            modelBuilder.Entity("Alumni.Data.Models.News", b =>
                {
                    b.Property<Guid>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsId");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            NewsId = new Guid("85183070-d0af-41a1-9b3b-95d0073995eb"),
                            Contents = "Test seed",
                            CreatedOn = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/event3.jpg",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News"
                        },
                        new
                        {
                            NewsId = new Guid("fb8f1f7a-8853-4bed-8008-a17ae2a3be3f"),
                            Contents = "funny haha get shmucked",
                            CreatedOn = new DateTime(2025, 6, 8, 16, 29, 0, 623, DateTimeKind.Local).AddTicks(2970),
                            ImageUrl = "/images/event3.jpg",
                            IsDeleted = true,
                            LastEdited = new DateTime(2025, 9, 22, 16, 29, 0, 623, DateTimeKind.Local).AddTicks(2975),
                            Title = "file"
                        },
                        new
                        {
                            NewsId = new Guid("31dedd8d-0dc7-455a-955a-14d7d5e9320f"),
                            Contents = "f k y u d b j g d",
                            CreatedOn = new DateTime(2025, 7, 9, 16, 29, 0, 623, DateTimeKind.Local).AddTicks(2977),
                            ImageUrl = "/images/event3.jpg",
                            IsDeleted = false,
                            LastEdited = new DateTime(2025, 7, 9, 16, 29, 0, 623, DateTimeKind.Local).AddTicks(2978),
                            Title = "News"
                        });
                });

            modelBuilder.Entity("Alumni.Data.Models.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = new Guid("ecfccb98-75a2-49ee-910d-e5a5ec44ae5b"),
                            Contents = "On the 23.08.24 the alumni of Softuni Buditel will gather for a tea party in South park",
                            CreatedOn = new DateTime(2024, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "asd",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Alumni gathering",
                            UserId = new Guid("7388ce0f-df30-4686-9e49-46daac4e0292")
                        },
                        new
                        {
                            PostId = new Guid("7463e718-280e-47b6-93b3-f6d629e26a9d"),
                            Contents = "My master is a guy who likes to wear black and fights crime",
                            CreatedOn = new DateTime(2024, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "asd",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Just a random post",
                            UserId = new Guid("30913bf8-4000-4809-801e-764de3136c0e")
                        },
                        new
                        {
                            PostId = new Guid("ee03701f-f3c6-4872-8dc8-800a99947a9d"),
                            Contents = "I am prince Ferdinand, the first tzar of the new Bulgaria",
                            CreatedOn = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "asd",
                            IsDeleted = true,
                            LastEdited = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Listen to your tzar",
                            UserId = new Guid("8d7ed0e0-1804-4283-aa5b-802033b2c918")
                        },
                        new
                        {
                            PostId = new Guid("2fae760d-6a45-45ed-ae78-e4451ebf47f8"),
                            Contents = "Hello everyone! I hope this message finds you well. I’m excited to announce the launch of our new alumni mentorship program, designed to connect recent graduates with experienced professionals. It's a great way to share your expertise, give back to our community, and help guide the next generation. Looking forward to seeing many of you get involved!",
                            CreatedOn = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "asd",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Test",
                            UserId = new Guid("7388ce0f-df30-4686-9e49-46daac4e0292")
                        },
                        new
                        {
                            PostId = new Guid("22a984ee-76a2-4c73-b0bf-7ac5e30ccc1b"),
                            Contents = "Hello everyone! I hope this message finds you well. I’m excited to announce the launch of our new alumni mentorship program, designed to connect recent graduates with experienced professionals. It's a great way to share your expertise, give back to our community, and help guide the next generation. Looking forward to seeing many of you get involved!",
                            CreatedOn = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "asd",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Test",
                            UserId = new Guid("7388ce0f-df30-4686-9e49-46daac4e0292")
                        },
                        new
                        {
                            PostId = new Guid("62c9dd2b-1ad2-4089-a157-c358c0422884"),
                            Contents = "Hello everyone! I hope you're doing well. I'm thrilled to announce the launch of our new alumni mentorship program.This initiative aims to connect recent graduates with seasoned professionals.It's a fantastic opportunity to share your knowledge, give back to our community, and guide the next generation. I look forward to seeing many of you participate!",
                            CreatedOn = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "asd",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Test",
                            UserId = new Guid("7388ce0f-df30-4686-9e49-46daac4e0292")
                        });
                });

            modelBuilder.Entity("Alumni.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEdited")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d7ed0e0-1804-4283-aa5b-802033b2c918"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb00921c-c806-43d0-bf84-7454765589d9",
                            CreatedOn = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "VaskoBilkata@gmail.com",
                            EmailConfirmed = true,
                            ImageUrl = "asd",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "VASKOBILKATA@GMAIL.COM",
                            NormalizedUserName = "VASKOBILKATA",
                            PasswordHash = "AQAAAAIAAYagAAAAENvwYhxtc1zTt4/XKepSZ764U90nO7R8hatLV7ehcJDWiDUn3SyjH5VQ4Y7geC/U5A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f456b66-bb61-4d35-9016-7ce9c0d8b14a",
                            TwoFactorEnabled = false,
                            UserName = "VaskoBilkata"
                        },
                        new
                        {
                            Id = new Guid("30913bf8-4000-4809-801e-764de3136c0e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17e0c525-d0a5-49ee-93bb-27da12c6d2f6",
                            CreatedOn = new DateTime(2024, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            ImageUrl = "asd",
                            IsDeleted = true,
                            LastEdited = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHhepSv3HAu8oR3YYp52GL8iLDk5Q12WNPs/syOWz4szmTlij2aXPm8xz2JzJutCvg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Michael Caine"
                        },
                        new
                        {
                            Id = new Guid("7388ce0f-df30-4686-9e49-46daac4e0292"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02e92fe4-97d5-4d4c-a875-51e2dddbe597",
                            CreatedOn = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            ImageUrl = "asd",
                            IsDeleted = false,
                            LastEdited = new DateTime(2024, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEP+oZR/RvkEugO7EN9FPyt1CWdAkAY1KSvjgHe9IkWdAoBUuCYy2zIoDi097jNUJPw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Prince Ferdinand"
                        },
                        new
                        {
                            Id = new Guid("b6a98fd4-b8db-4566-ad8c-d7c49f3bd2db"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d68865fd-463a-4a9a-996a-3bd9a70e6eeb",
                            CreatedOn = new DateTime(2025, 7, 9, 16, 29, 0, 728, DateTimeKind.Local).AddTicks(5158),
                            EmailConfirmed = false,
                            ImageUrl = "asd",
                            IsDeleted = false,
                            LastEdited = new DateTime(2025, 7, 16, 16, 29, 0, 728, DateTimeKind.Local).AddTicks(5206),
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELn5WnsWtuEESDiWCLnJe2tuYz5NFtricdFEPH7y2XxmsriktG9uQedsuGuWMVE4Ig==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Burxh califchar"
                        },
                        new
                        {
                            Id = new Guid("6609e8af-abbe-4472-a1ff-ab5fdfb92f80"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60348994-c1d6-4062-b737-6ab1e4f41b93",
                            CreatedOn = new DateTime(2025, 7, 22, 16, 29, 0, 763, DateTimeKind.Local).AddTicks(3690),
                            EmailConfirmed = false,
                            ImageUrl = "asd",
                            IsDeleted = true,
                            LastEdited = new DateTime(2025, 7, 23, 16, 29, 0, 763, DateTimeKind.Local).AddTicks(3733),
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHejvDSCcd4xW/X1cgrPkpznhY3j4h1qAWZWXkYZ4YrKBOjM/AI+IqCr8sfkuM2UhA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "gazelle trueman"
                        });
                });

            modelBuilder.Entity("Alumni.Data.Models.UserEvent", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("UsersEvents");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d23fe586-7d83-4aa3-bab5-99cf956d0522"),
                            ConcurrencyStamp = "4FF41592-5852-41D2-AC58-15B64B4BDF34",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b6154565-c62f-433a-98c6-218fde24559f"),
                            ConcurrencyStamp = "YOUR_NEW_CONCURRENCY_STAMP_FOR_ALUMNI",
                            Name = "Alumni",
                            NormalizedName = "ALUMNI"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8d7ed0e0-1804-4283-aa5b-802033b2c918"),
                            RoleId = new Guid("d23fe586-7d83-4aa3-bab5-99cf956d0522")
                        },
                        new
                        {
                            UserId = new Guid("30913bf8-4000-4809-801e-764de3136c0e"),
                            RoleId = new Guid("b6154565-c62f-433a-98c6-218fde24559f")
                        },
                        new
                        {
                            UserId = new Guid("7388ce0f-df30-4686-9e49-46daac4e0292"),
                            RoleId = new Guid("b6154565-c62f-433a-98c6-218fde24559f")
                        },
                        new
                        {
                            UserId = new Guid("b6a98fd4-b8db-4566-ad8c-d7c49f3bd2db"),
                            RoleId = new Guid("b6154565-c62f-433a-98c6-218fde24559f")
                        },
                        new
                        {
                            UserId = new Guid("6609e8af-abbe-4472-a1ff-ab5fdfb92f80"),
                            RoleId = new Guid("b6154565-c62f-433a-98c6-218fde24559f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Alumni.Data.Models.CharityDonationUser", b =>
                {
                    b.HasOne("Alumni.Data.Models.CharityDonation", "CharityDonation")
                        .WithMany("Donators")
                        .HasForeignKey("CharityDonationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alumni.Data.Models.User", "User")
                        .WithMany("CharityDonationsContributed")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharityDonation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Alumni.Data.Models.Comment", b =>
                {
                    b.HasOne("Alumni.Data.Models.News", null)
                        .WithMany("Comments")
                        .HasForeignKey("NewsId");

                    b.HasOne("Alumni.Data.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Alumni.Data.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Alumni.Data.Models.HelpResponse", b =>
                {
                    b.HasOne("Alumni.Data.Models.HelpRequest", "HelpRequest")
                        .WithMany("Responses")
                        .HasForeignKey("HelpRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HelpRequest");
                });

            modelBuilder.Entity("Alumni.Data.Models.Post", b =>
                {
                    b.HasOne("Alumni.Data.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Alumni.Data.Models.UserEvent", b =>
                {
                    b.HasOne("Alumni.Data.Models.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alumni.Data.Models.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Alumni.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Alumni.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alumni.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Alumni.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alumni.Data.Models.CharityDonation", b =>
                {
                    b.Navigation("Donators");
                });

            modelBuilder.Entity("Alumni.Data.Models.Event", b =>
                {
                    b.Navigation("EventUsers");
                });

            modelBuilder.Entity("Alumni.Data.Models.HelpRequest", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Alumni.Data.Models.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Alumni.Data.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Alumni.Data.Models.User", b =>
                {
                    b.Navigation("CharityDonationsContributed");

                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
